#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import time  # time module
import smbus  # led sensor
from nav_msgs.msg import Odometry  # odom

LINEAR_VEL = 0.22
STOP_DISTANCE = 0.50
LIDAR_ERROR = 0.05
ANGLE = 90
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR


# odom global variables
SUM = 0
COUNT = 0

# odom subscriber callback
def odometryCallback(data):
    #retrieve velocity here
    COUNT += 1
    SUM += data.twist.twist.linear.x
    average_linear_speed = SUM/COUNT
    rospy.loginfo(average_linear_speed)

class Obstacle():

    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []

        samples = len(scan.ranges)  # The number of samples is defined in
        # turtlebot3_<model>.gazebo.xacro file,
        # the default is 360.

        samples_view = ANGLE        # 1 <= samples_view <= samples

        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2

            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            # set value to 3.5 in case of a faulty reading and hope we don't get all 0 readings
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 3.5
            elif scan_filter[i] == 0:
                scan_filter[i] = 3.5

        return scan_filter
   

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        t_end = time.time() + 120  # time_time returns time since 1st jan 1970
        speed_updates = 0  # for average speed
        speed_accumulation = 0  # for average speed
        collision_count = 0  # collision counter
        red_count = 0
     

        # LED
        # Get I2C bus
        bus = smbus.SMBus(1)

        # ISL29125 address, 0x44(68)
        # Select configuation-1register, 0x01(01)
        # 0x0D(13) Operation: RGB, Range: 360 lux, Res: 16 Bits
        # bus.write_byte_data(0x44, 0x01, 0x05)

        # function for turning
        def turn(min_left, min_right, turn_value):
            if min_right < min_left:
                twist.angular.z = turn_value  # left
                self._cmd_pub.publish(twist)
                rospy.loginfo('Turn left!')
            else:  # min_distance_left < min_distance_right
                twist.angular.z = -turn_value  # right
                self._cmd_pub.publish(twist)
                rospy.loginfo('Turn right!')

        # runtime loopet
        while time.time() < t_end:  # runs for X secs
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            min_distance_right = min(lidar_distances[0:29])
            min_distance_center = min(lidar_distances[30:59])
            min_distance_left = min(lidar_distances[60:89])

            if min_distance_center < SAFE_STOP_DISTANCE:  # something need to be happen
                if min_distance_center > 0.40:  # dist between 55 and 35
                    rospy.loginfo('Between 55 and 40')
                    turn(min_distance_left, min_distance_right, 1)

                elif min_distance_center > 0.25:  # dist between 35 and 20
                    rospy.loginfo('Between 40 and 25')
                    turn(min_distance_left, min_distance_right, 2)
                else:
                    rospy.loginfo('Below 20')
                    twist.linear.x = 0  # stop
                    twist.angular.z = 4  # left
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Turn left!')
                    # turn(min_distance_left, min_distance_right, 3)
                    # time.sleep(3)

            else:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f',
                              min_distance_center)

            # collision
            if min_distance_center <= 0.4 or min_distance_left <= 0.5 or min_distance_right <= 0.5:
                collision_count = collision_count + 1

            # speed_updates = speed_updates + 1
            # speed_accumulation = speed_accumulation + twist.linear.x

            # read LED data
            # data = bus.read_i2c_block_data(0x44, 0x09, 6)

            # Convert the data to green, red and blue int values
            # green = 256*data[1] + data[0]
            # red = 256*data[3] + data[2]
            # blue = 256*data[5] + data[4]

            # count red
            # if red > green and red > blue:  # red
            #    red_count = red_count + 1

        #rospy.loginfo('average speed : %f', speed_accumulation / speed_updates)
        rospy.loginfo('collision count : %f', collision_count)
        # rospy.loginfo('victim count : %f', red_count)


def main():
    rospy.init_node('turtlebot3_obstacle')
    rospy.Subscriber('/odom', Odometry, odometryCallback)
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass


if __name__ == '__main__':
    main()
